/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * tcpdump.java
 *
 * Created on Jun 29, 2012, 4:58:05 PM
 */
/**
 *
 * @author Dayaram
 */
package pcap;
import jpcap.*;
import java.io.*;
import jpcap.packet.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import org.jfree.chart.*;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.*;
import org.jfree.data.general.*;
public class tcpdump extends javax.swing.JFrame {
JpcapCaptor captor;
Hashtable h=new Hashtable();
    /** Creates new form tcpdump */
    public tcpdump() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(pcap.PcapApp.class).getContext().getResourceMap(tcpdump.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(39, 39, 39)
                        .addComponent(jButton2)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(37, 37, 37)
                .addComponent(jButton3)
                .addContainerGap(132, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
protocolwise_chart();         // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    public void protocolwise_chart()
{
    try{
        File current=new File("");
            System.out.println(current.getAbsoluteFile());
        captor=JpcapCaptor.openFile(current.getAbsolutePath()+"\\tcp-ecn-sample.pcap");
        }catch(Exception e){System.out.println(e);}
    h.clear();
    captor.loopPacket(-1, new pHandler());
    Iterator i=h.keySet().iterator();
    String protocol;
    DefaultPieDataset dataset = new DefaultPieDataset();
    while(i.hasNext())
    {
        protocol=(String)i.next();
        dataset.setValue(protocol, (Integer)h.get(protocol));
    }
                
            JFreeChart chart = ChartFactory.createPieChart("Protocolwise Pie Chart",dataset,true,true,false);
            ChartFrame frame = new ChartFrame("Protocolwise Pie Chart", chart);
            frame.pack();
            frame.setVisible(true);
}
class pHandler implements PacketReceiver
{
    int cnt=0,n=0;
    String str;
        public void receivePacket(Packet packet) {
            str=packet.getClass().getName().substring(packet.getClass().getName().lastIndexOf(".")+1);
            n=0;
            if(h.containsKey(str))
            {
                n=(Integer)h.get(str);
            }
            n++;
            h.put(str, n);
            cnt++;
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
dataTransferReport();         // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    public void dataTransferReport()
{
    try{
        File current=new File("");
            System.out.println(current.getAbsoluteFile());
        captor=JpcapCaptor.openFile(current.getAbsolutePath()+"\\tcp-ecn-sample.pcap");
        }catch(Exception e){}
    h.clear();
    captor.loopPacket(-1, new TransHandler());
    Iterator i=h.keySet().iterator();
    String address;
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    while(i.hasNext())
    {
        address=i.next()+"";
        
        dataset.setValue((Double)h.get(address), "Value", address);
    }
    JFreeChart chart = ChartFactory.createBarChart("Datewise Data Transferred","Date","Value(In MB)",dataset,PlotOrientation.VERTICAL,true,true,false);
                ChartFrame frame = new ChartFrame("Datewise Data Transferred", chart);
                frame.pack();
                frame.setVisible(true);
}
class TransHandler implements PacketReceiver
{
        double size;
        public void receivePacket(Packet packet) {
            size=0;
            IPPacket p=(IPPacket)packet;
            if(h.containsKey(p.src_ip+""))
            {
                size=(Double)h.get(p.src_ip+"");
                
            }
            size+=(packet.len/1024.00);
            h.put(p.src_ip+"", size);
        }
    
}
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
frame f=new frame();
        f.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    class frame extends JFrame
{
    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);
    
    
    frame()
    {
       
model.addColumn("No.");
model.addColumn("Source Mac Address");
model.addColumn("Destination Mac Address");
model.addColumn("Source IP Address");
model.addColumn("Destination IP Address");
model.addColumn("Data Transferred");

/*model.addRow(new Object[]{"v1"});
model.addRow(new Object[]{"","",""});
model.setValueAt("s", 1, 1);*/

    //JFrame f = new JFrame();
    add(new JScrollPane(table));
    setSize(700, 700);
    addData();
    }
    public void addData()
    {
        try{
        File current=new File("");
            System.out.println(current.getAbsoluteFile());
        captor=JpcapCaptor.openFile(current.getAbsolutePath()+"\\tcp-ecn-sample.pcap");
        }catch(Exception e){System.out.println(e);}
        captor.loopPacket(-1, new TabDataHandler());
        
    }
    class TabDataHandler implements PacketReceiver
{
int cnt=1;
IPPacket p;
EthernetPacket e;
StringBuilder sb;
        public void receivePacket(Packet packet) {
            model.addRow(new Object[]{"","","","","",""});
            p=(IPPacket)packet;
            e=(EthernetPacket)packet.datalink;
            model.setValueAt(cnt, cnt-1, 0);
            sb=new StringBuilder();
            sb = new StringBuilder();
            for (byte b : e.src_mac) {
            sb.append(String.format("%02X ", b));
            sb.append(":");
            }
            sb.deleteCharAt(sb.length()-1);
            model.setValueAt(sb.toString(), cnt-1, 1);
            sb.delete(0, sb.length()-1);
            for (byte b : e.dst_mac) {
            sb.append(String.format("%02X ", b));
            sb.append(":");
            }
            sb.deleteCharAt(sb.length()-1);
            model.setValueAt(sb.toString(), cnt-1, 2);
            model.setValueAt(p.src_ip, cnt-1, 3);
            model.setValueAt(p.dst_ip, cnt-1, 4);
            model.setValueAt(packet.len, cnt-1, 5);
            cnt++;
        }
    
}
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new tcpdump().setVisible(true);
            }
        });
    }
     
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    // End of variables declaration//GEN-END:variables
}
